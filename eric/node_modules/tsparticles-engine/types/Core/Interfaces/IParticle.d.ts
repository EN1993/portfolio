import type { IHsl, IRgb } from "tsparticles-engine/types/Core/Interfaces/Colors";
import type { IBubbleParticleData } from "tsparticles-engine/types/Core/Interfaces/IBubbleParticleData";
import type { ICoordinates3d } from "tsparticles-engine/types/Core/Interfaces/ICoordinates";
import type { IParticleHslAnimation } from "tsparticles-engine/types/Core/Interfaces/IParticleHslAnimation";
import type { IParticleNumericValueAnimation } from "tsparticles-engine/types/Core/Interfaces/IParticleValueAnimation";
import type { IParticleRetinaProps } from "tsparticles-engine/types/Core/Interfaces/IParticleRetinaProps";
import type { IParticleRoll } from "tsparticles-engine/types/Core/Interfaces/IParticleRoll";
import type { IParticlesOptions } from "tsparticles-engine/types/Options/Interfaces/Particles/IParticlesOptions";
import type { IShapeValues } from "tsparticles-engine/types/Core/Interfaces/IShapeValues";
import type { Interactivity } from "tsparticles-engine/types/Options/Classes/Interactivity/Interactivity";
import type { Vector } from "tsparticles-engine/types/Core/Utils/Vector";
export interface IParticle {
    readonly backColor?: IHsl;
    readonly bubble: IBubbleParticleData;
    readonly close: boolean;
    readonly color?: IParticleHslAnimation;
    readonly destroyed: boolean;
    readonly direction: number;
    readonly fill: boolean;
    readonly id: number;
    readonly initialVelocity: Vector;
    readonly interactivity: Interactivity;
    misplaced: boolean;
    readonly offset: Vector;
    readonly opacity?: IParticleNumericValueAnimation;
    readonly options: IParticlesOptions;
    readonly position: Vector;
    randomIndexData?: number;
    readonly retina: IParticleRetinaProps;
    readonly roll?: IParticleRoll;
    readonly rotation: number;
    readonly shadowColor?: IRgb;
    readonly shape?: string;
    readonly shapeData?: IShapeValues;
    readonly sides: number;
    readonly size: IParticleNumericValueAnimation;
    readonly strokeColor?: IParticleHslAnimation;
    readonly strokeOpacity?: number;
    readonly strokeWidth?: number;
    readonly velocity: Vector;
    getFillColor(): IHsl | undefined;
    getMass(): number;
    getPosition(): ICoordinates3d;
    getRadius(): number;
    getStrokeColor(): IHsl | undefined;
    isInsideCanvas(): boolean;
    isVisible(): boolean;
}
