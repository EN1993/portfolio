import type { Container } from "tsparticles-engine/types/Core/Container";
import type { IDelta } from "tsparticles-engine/types/Core/Interfaces/IDelta";
import type { IParticlesInteractor } from "tsparticles-engine/types/Core/Interfaces/IParticlesInteractor";
import { InteractorType } from "tsparticles-engine/types/Enums/Types/InteractorType";
import type { Particle } from "tsparticles-engine/types/Core/Particle";
export declare abstract class ParticlesInteractorBase<TContainer extends Container = Container> implements IParticlesInteractor {
    protected readonly container: TContainer;
    type: InteractorType;
    protected constructor(container: TContainer);
    abstract clear(particle: Particle, delta: IDelta): void;
    abstract init(): void;
    abstract interact(particle: Particle, delta: IDelta): Promise<void>;
    abstract isEnabled(particle: Particle): boolean;
    abstract reset(particle: Particle): void;
}
