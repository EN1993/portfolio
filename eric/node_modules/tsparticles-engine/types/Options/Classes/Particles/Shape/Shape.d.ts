import type { ICharacterShape } from "tsparticles-engine/types/Options/Interfaces/Particles/Shape/ICharacterShape";
import type { IImageShape } from "tsparticles-engine/types/Options/Interfaces/Particles/Shape/IImageShape";
import type { IOptionLoader } from "tsparticles-engine/types/Options/Interfaces/IOptionLoader";
import type { IPolygonShape } from "tsparticles-engine/types/Options/Interfaces/Particles/Shape/IPolygonShape";
import type { IShape } from "tsparticles-engine/types/Options/Interfaces/Particles/Shape/IShape";
import type { RecursivePartial } from "tsparticles-engine/types/Types/RecursivePartial";
import type { ShapeData } from "tsparticles-engine/types/Types/ShapeData";
import type { SingleOrMultiple } from "tsparticles-engine/types/Types/SingleOrMultiple";
import type { Stroke } from "tsparticles-engine/types/Options/Classes/Particles/Stroke";
export declare class Shape implements IShape, IOptionLoader<IShape> {
    options: ShapeData;
    type: SingleOrMultiple<string>;
    constructor();
    get character(): SingleOrMultiple<ICharacterShape>;
    set character(value: SingleOrMultiple<ICharacterShape>);
    get custom(): ShapeData;
    set custom(value: ShapeData);
    get image(): SingleOrMultiple<IImageShape>;
    set image(value: SingleOrMultiple<IImageShape>);
    get images(): SingleOrMultiple<IImageShape>;
    set images(value: SingleOrMultiple<IImageShape>);
    get polygon(): SingleOrMultiple<IPolygonShape>;
    set polygon(value: SingleOrMultiple<IPolygonShape>);
    get stroke(): SingleOrMultiple<Stroke>;
    set stroke(_value: SingleOrMultiple<Stroke>);
    load(data?: RecursivePartial<IShape>): void;
    private loadShape;
}
